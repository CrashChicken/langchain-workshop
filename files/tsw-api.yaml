openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
      security:
        - api-key: []
        - firebase-token: []
  /users:
    post:
      operationId: UsersController_create
      summary: >-
        Creates users profile in database (only for machine to machine
        communication)
      description: Only for testing purposes
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDto"
      tags: &ref_0
        - users
      security: &ref_1
        - api-key: []
        - firebase-token: []
    get:
      operationId: UsersController_findAll
      parameters:
        - name: isPublic
          required: false
          in: query
          schema:
            type: boolean
        - name: handle
          required: false
          in: query
          description: Handle (must be unique, if not provided is autogenerated).
          example: johndoe
          schema:
            minLength: 1
            maxLength: 100
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUsersDto"
      tags: *ref_0
      security: *ref_1
  /users/{userId}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDto"
      tags: *ref_0
      security: *ref_1
    patch:
      operationId: UsersController_update
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDto"
      tags: *ref_0
      security: *ref_1
  /users/{userId}/public:
    get:
      operationId: UsersController_findOnePublic
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePublicUserDto"
      tags: *ref_0
      security: *ref_1
  /metadata:
    post:
      operationId: MetadataController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMetadatumDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMetadatumDto"
      tags: &ref_2
        - metadata
      security: &ref_3
        - api-key: []
        - firebase-token: []
    get:
      operationId: MetadataController_findAll
      parameters:
        - name: schoolId
          required: false
          in: query
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: programId
          required: false
          in: query
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: subjectId
          required: false
          in: query
          description: Subject ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: teacherId
          required: false
          in: query
          description: Teacher ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: type
          required: false
          in: query
          description: Name of the value.
          example: subject
          schema:
            enum:
              - school
              - program
              - subject
              - teacher
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMetadataDto"
      tags: *ref_2
      security: *ref_3
  /metadata/{id}:
    get:
      operationId: MetadataController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMetadatumDto"
      tags: *ref_2
      security: *ref_3
    patch:
      operationId: MetadataController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMetadatumDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMetadatumDto"
      tags: *ref_2
      security: *ref_3
    delete:
      operationId: MetadataController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMetadatumDto"
      tags: *ref_2
      security: *ref_3
  /notes:
    post:
      operationId: NotesController_create
      summary: Creates note
      description: This endpoint is for users and admins creating notes.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNoteDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseNoteRichDto"
      tags: &ref_4
        - notes
      security: &ref_5
        - api-key: []
        - firebase-token: []
    get:
      operationId: NotesController_findAll
      summary: Returns list of notes with note info (admins)
      description: This endpoint is for admins getting list of notes.
      parameters:
        - name: ownerId
          required: false
          in: query
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          schema:
            minLength: 28
            maxLength: 28
            type: string
        - name: status
          required: false
          in: query
          description: Status of the note in the conversion pipeline
          example: uploading
          schema:
            enum:
              - uploading
              - draft
              - processing
              - moderation
              - done
              - error
            type: string
        - name: forSale
          required: false
          in: query
          description: Is the note for sale?
          example: true
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseNotesDto"
      tags: *ref_4
      security: *ref_5
  /notes/{id}/generateQaks:
    post:
      operationId: NotesController_generateQaks
      summary: Creates QAKs from note
      description: This endpoint is for users and admins generating QAKs from notes.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "201":
          description: ""
      tags: *ref_4
      security: *ref_5
  /notes/{id}/recommendations:
    post:
      operationId: NotesController_recommendMetadata
      summary: Gets recommendations for note
      description: This endpoint is for users and admins getting recommendations for notes.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseRecommendedMetadataDto"
      tags: *ref_4
      security: *ref_5
  /user/{userId}/notes:
    get:
      operationId: NotesController_findUserNotes
      summary: Returns list of notes with just note info from userId
      description: This endpoint is for users and admins getting list of notes from userId.
      parameters:
        - name: status
          required: false
          in: query
          description: Status of the note in the conversion pipeline
          example: uploading
          schema:
            enum:
              - uploading
              - draft
              - processing
              - moderation
              - done
              - error
            type: string
        - name: forSale
          required: false
          in: query
          description: Is the note for sale?
          example: true
          schema:
            type: boolean
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseNotesDto"
      tags: *ref_4
      security: *ref_5
  /notes/{id}:
    get:
      operationId: NotesController_findOne
      summary: Returns note info and text formated as Editor.JS JSON
      description: This endpoint is for users and admins getting note info and text.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseNoteRichDto"
      tags: *ref_4
      security: *ref_5
    patch:
      operationId: NotesController_update
      summary: Updates note info
      description: This endpoint is for users and admins updating note info.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateNoteDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseNoteRichDto"
      tags: *ref_4
      security: *ref_5
    delete:
      operationId: NotesController_remove
      summary: Deletes note
      description: This endpoint is for users and admins deleting notes.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseNoteDto"
      tags: *ref_4
      security: *ref_5
  /files:
    post:
      operationId: FilesController_create
      summary: Creates intent for file upload
      description: >-
        This endpoint is for creating intent for file upload.

        After creating intent, you can upload file to the objectPath returned in
        the response (intent unlocks only this path).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFileDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFileDto"
        "401":
          description: Called without credentials.
        "403":
          description: Called without proper permissions.
      tags: &ref_6
        - files
      security: &ref_7
        - api-key: []
        - firebase-token: []
    get:
      operationId: FilesController_findAll
      summary: List all files from all users (admins)
      description: This endpoint is for admins getting list of files from all users.
      parameters:
        - name: ownerId
          required: false
          in: query
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          schema:
            minLength: 28
            maxLength: 28
            type: string
        - name: status
          required: false
          in: query
          description: Status of the file.
          example: uploading
          schema:
            enum:
              - uploading
              - processing
              - done
              - error
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFilesDto"
      tags: *ref_6
      security: *ref_7
  /user/{userId}/files:
    get:
      operationId: FilesController_findUserFiles
      summary: List all users files
      description: This endpoint is for users getting list of their files.
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
        - name: status
          required: false
          in: query
          description: Status of the file.
          example: uploading
          schema:
            enum:
              - uploading
              - processing
              - done
              - error
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFilesDto"
      tags: *ref_6
      security: *ref_7
  /files/{id}:
    get:
      operationId: FilesController_findOne
      summary: Get a file
      description: >-
        This endpoint is for getting details of a file. Admins can also get
        details of any file.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFileDto"
      tags: *ref_6
      security: *ref_7
    patch:
      operationId: FilesController_update
      summary: Update a file
      description: >-
        This endpoint is for changing the name of the file. Admins can also
        update status of a file.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFileDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFileDto"
      tags: *ref_6
      security: *ref_7
    delete:
      operationId: FilesController_remove
      summary: Delete a file
      description: This endpoint is for deleting a file. Admins can also delete any file.
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFileDto"
      tags: *ref_6
      security: *ref_7
  /qaksections/{id}/qaks:
    post:
      operationId: QaksController_create
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQaksDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakDto"
      tags: &ref_8
        - qaks
      security:
        - api-key: []
        - firebase-token: []
    get:
      operationId: QaksController_findAllBySectionId
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: noteId
          required: false
          in: query
          description: Id of note this QAK belongs to.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: sectionId
          required: false
          in: query
          description: Id of section this QAK belongs to.
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: ownerId
          required: false
          in: query
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          schema:
            minLength: 28
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksDto"
      tags: *ref_8
  /qaks:
    get:
      operationId: QaksController_findAll
      parameters:
        - name: noteId
          required: false
          in: query
          description: Id of note this QAK belongs to.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: sectionId
          required: false
          in: query
          description: Id of section this QAK belongs to.
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: ownerId
          required: false
          in: query
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          schema:
            minLength: 28
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksDto"
      tags: *ref_8
  /qaks/{id}:
    get:
      operationId: QaksController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakDto"
      tags: *ref_8
    patch:
      operationId: QaksController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQaksDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakDto"
      tags: *ref_8
      security:
        - api-key: []
        - firebase-token: []
    delete:
      operationId: QaksController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakDto"
      tags: *ref_8
      security:
        - api-key: []
        - firebase-token: []
  /notes/{id}/qaksections:
    post:
      operationId: QaksectionsController_create
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQaksectionDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksectionDto"
      tags: &ref_9
        - qaksections
      security:
        - api-key: []
        - firebase-token: []
    get:
      operationId: QaksectionsController_findAllByNoteId
      summary: ""
      description: Get all QAK sections for a note
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: ownerId
          required: false
          in: query
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          schema:
            minLength: 28
            maxLength: 28
            type: string
        - name: parentId
          required: false
          in: query
          description: Parent section id (if empty then it's a root section).
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksectionsDto"
      tags: *ref_9
  /qaksections:
    get:
      operationId: QaksectionsController_findAll
      parameters:
        - name: noteId
          required: false
          in: query
          description: Id of note.
          example: 2JaQvadYTvzvMYGJDoO7
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: ownerId
          required: false
          in: query
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          schema:
            minLength: 28
            maxLength: 28
            type: string
        - name: parentId
          required: false
          in: query
          description: Parent section id (if empty then it's a root section).
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksectionsDto"
      tags: *ref_9
  /qaksections/{id}:
    get:
      operationId: QaksectionsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksectionDto"
      tags: *ref_9
    patch:
      operationId: QaksectionsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQaksectionDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksectionDto"
      tags: *ref_9
      security:
        - api-key: []
        - firebase-token: []
    delete:
      operationId: QaksectionsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQaksectionDto"
      tags: *ref_9
      security:
        - api-key: []
        - firebase-token: []
  /users/{userId}/qaks/{id}/qakfeedbacks:
    post:
      operationId: QakfeedbacksController_create
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQakfeedbackDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakFeedbackDto"
      tags: &ref_10
        - qakfeedbacks
      security: &ref_11
        - api-key: []
        - firebase-token: []
  /users/{userId}/qaksections/{id}/qakfeedbacks:
    get:
      operationId: QakfeedbacksController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakFeedbackDto"
      tags: *ref_10
      security: *ref_11
    delete:
      operationId: QakfeedbacksController_remove
      summary: ""
      description: Delete all learning progress of a user in a qaksection
      parameters:
        - name: id
          required: true
          in: path
          description: Firebase ID
          example: PvA2l1WFJilthCUJS1cT
          schema:
            minLength: 20
            maxLength: 20
            type: string
        - name: userId
          required: true
          in: path
          description: User ID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          schema:
            minLength: 2
            maxLength: 28
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseQakFeedbackDto"
      tags: *ref_10
      security: *ref_11
info:
  title: TSW API
  description: Backend API for TSW
  version: "1.0"
  contact: {}
tags: []
servers:
  - url: https://tsw-api-dev-sk4m6ydvfq-ey.a.run.app
components:
  securitySchemes:
    firebase-token:
      scheme: bearer
      bearerFormat: JWT
      type: http
    api-key:
      scheme: bearer
      bearerFormat: API_KEY
      type: http
  schemas:
    CreateUserDto:
      type: object
      properties:
        uid:
          type: string
          description: User UID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          minLength: 28
          maxLength: 28
        email:
          type: string
          description: Email.
          example: example@example.com
        firstName:
          type: string
          description: First name.
          example: John
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          description: Last name.
          example: Doe
          minLength: 1
          maxLength: 100
        handle:
          type: string
          description: Handle (must be unique, if not provided is autogenerated).
          example: johndoe
          minLength: 1
          maxLength: 100
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        className:
          type: string
          description: Class name.
          example: 3. A
          maxLength: 255
        grade:
          type: number
          description: Grade
          example: 3
          minimum: 1
          maximum: 100
        enrollmentYear:
          type: number
          description: Enrollment year.
          example: 2020
          minimum: 1900
          maximum: 2100
        isPublic:
          type: boolean
          description: Is the user public?
          example: true
    ResponseUserDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        uid:
          type: string
          description: User UID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          minLength: 28
          maxLength: 28
        firstName:
          type: string
          description: First name.
          example: John
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          description: Last name.
          example: Doe
          minLength: 1
          maxLength: 100
        email:
          type: string
          description: Email.
          example: example@example.com
        handle:
          type: string
          description: Handle (must be unique, if not provided is autogenerated).
          example: johndoe
          minLength: 1
          maxLength: 100
        role:
          description: Role (if not provided is set to 'student').
          example: student
          enum:
            - anonymous
            - user
            - admin
          type: string
        profileImage:
          type: string
          description: Profile image.
          example: /path/to/image
        smartPoints:
          type: number
          description: Smart points.
        lockedSmartPoints:
          type: number
          description: Locked smart points.
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        schoolName:
          type: string
          description: School name from metadata.
          example: >-
            Šolski center Celje, Srednja šola za kemijo, elektrotehniko in
            računalništvo
          minLength: 1
          maxLength: 255
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programName:
          type: string
          description: Program name from metadata.
          example: Tehnik računalništva
          maxLength: 255
        className:
          type: string
          description: Class name.
          example: 3. A
          maxLength: 255
        enrollmentYear:
          type: number
          description: Enrollment year.
          example: 2020
          minimum: 1900
          maximum: 2100
        grade:
          type: number
          description: Grade
          example: 3
          minimum: 1
          maximum: 100
        isPublic:
          type: boolean
          description: Is the user public?
          example: true
      required:
        - id
        - createdAt
        - updatedAt
        - uid
        - email
        - handle
        - role
        - smartPoints
        - lockedSmartPoints
        - isPublic
    ResponsePublicUserDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        uid:
          type: string
          description: User UID.
          example: 9wHNBcRzy4Qw5wjaRfAR5jeu2CH2
          minLength: 28
          maxLength: 28
        firstName:
          type: string
          description: First name.
          example: John
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          description: Last name.
          example: Doe
          minLength: 1
          maxLength: 100
        handle:
          type: string
          description: Handle (must be unique, if not provided is autogenerated).
          example: johndoe
          minLength: 1
          maxLength: 100
        profileImage:
          type: string
          description: Profile image.
          example: /path/to/image
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        schoolName:
          type: string
          description: School name from metadata.
          example: >-
            Šolski center Celje, Srednja šola za kemijo, elektrotehniko in
            računalništvo
          minLength: 1
          maxLength: 255
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programName:
          type: string
          description: Program name from metadata.
          example: Tehnik računalništva
          maxLength: 255
        className:
          type: string
          description: Class name.
          example: 3. A
          maxLength: 255
        grade:
          type: number
          description: Grade
          example: 3
          minimum: 1
          maximum: 100
        enrollmentYear:
          type: number
          description: Enrollment year.
          example: 2020
          minimum: 1900
          maximum: 2100
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
      required:
        - id
        - uid
        - handle
        - createdAt
        - updatedAt
    ResponseUsersDto:
      type: object
      properties:
        data:
          description: Array of records.
          type: array
          items:
            $ref: "#/components/schemas/ResponsePublicUserDto"
        total:
          type: number
          description: Total number of records.
          example: 1
      required:
        - data
        - total
    UpdateUserDto:
      type: object
      properties:
        firstName:
          type: string
          description: First name.
          example: John
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          description: Last name.
          example: Doe
          minLength: 1
          maxLength: 100
        handle:
          type: string
          description: Handle (must be unique, if not provided is autogenerated).
          example: johndoe
          minLength: 1
          maxLength: 100
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        className:
          type: string
          description: Class name.
          example: 3. A
          maxLength: 255
        grade:
          type: number
          description: Grade
          example: 3
          minimum: 1
          maximum: 100
        enrollmentYear:
          type: number
          description: Enrollment year.
          example: 2020
          minimum: 1900
          maximum: 2100
        isPublic:
          type: boolean
          description: Is the user public?
          example: true
    CreateMetadatumDto:
      type: object
      properties:
        type:
          type: string
          description: Name of the value.
          example: subject
          enum:
            - school
            - program
            - subject
            - teacher
        name:
          type: string
          description: Name of the value.
          example: matematika
          minLength: 1
          maxLength: 255
        schools:
          description: School list.
          example: &ref_12
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        programs:
          description: Programs list.
          example: &ref_13
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        subjects:
          description: Subjects list.
          example: &ref_14
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        teachers:
          description: Subjects list.
          example: &ref_15
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
      required:
        - type
        - name
    ResponseMetadatumDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        type:
          description: Name of the value.
          example: subject
          enum:
            - school
            - program
            - subject
            - teacher
          type: string
        name:
          type: string
          description: Name of the value.
          example: matematika
          minLength: 1
          maxLength: 255
        schools:
          description: School list.
          example:
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        programs:
          description: Programs list.
          example:
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        subjects:
          description: Subjects list.
          example:
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        teachers:
          description: Subjects list.
          example:
            - 2JaQvadYTvzvMYGJDoO7
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
      required:
        - id
        - createdAt
        - updatedAt
        - type
        - name
    ResponseMetadataDto:
      type: object
      properties:
        data:
          description: Array of records.
          type: array
          items:
            $ref: "#/components/schemas/ResponseMetadatumDto"
        total:
          type: number
          description: Total number of records.
          example: 1
      required:
        - data
        - total
    UpdateMetadatumDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the value.
          example: matematika
          minLength: 1
          maxLength: 255
        schools:
          description: School list.
          example: *ref_12
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        programs:
          description: Programs list.
          example: *ref_13
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        subjects:
          description: Subjects list.
          example: *ref_14
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        teachers:
          description: Subjects list.
          example: *ref_15
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
    DataEntity:
      type: object
      properties:
        text:
          type: string
          description: Text.
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        level:
          type: number
          description: Level of heading.
          example: 1
          minimum: 1
          maximum: 6
      required:
        - text
    BlockEntity:
      type: object
      properties:
        type:
          type: string
          description: Block type.
          example: header
        data:
          description: Block data.
          allOf:
            - $ref: "#/components/schemas/DataEntity"
      required:
        - type
        - data
    CreateNoteDto:
      type: object
      properties:
        text:
          description: Optional text for the note.
          type: array
          items:
            $ref: "#/components/schemas/BlockEntity"
        title:
          type: string
          description: Name of the note.
          example: My first note
          minLength: 1
          maxLength: 100
        files:
          description: Optional list of files.
          example:
            - JB5cSmT0iuSp4w85wDcJ
            - 4UVqFxtJ8RKPLOMaIBVD
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        forSale:
          type: boolean
          description: Is the note for sale?
          example: true
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        subjectId:
          type: string
          description: Subject ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        teacherId:
          type: string
          description: Teacher ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
    ResponsePublicFileDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        name:
          type: string
          description: Name of the file.
          example: my-file.txt
          minLength: 1
          maxLength: 255
        objectPath:
          type: string
          description: Path of the file in the object storage.
          example: uploads/2JaQvadYTvzvMYGJDoO7/original.txt
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
      required:
        - id
        - name
        - objectPath
        - createdAt
        - updatedAt
    ResponseNoteRichDto:
      type: object
      properties:
        text:
          description: The text of the note in Editor.JS format.
          type: array
          items:
            $ref: "#/components/schemas/BlockEntity"
        files:
          description: File information for the note.
          type: array
          items:
            $ref: "#/components/schemas/ResponsePublicFileDto"
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        title:
          type: string
          description: Name of the note.
          example: My first note
          minLength: 1
          maxLength: 100
        forSale:
          type: boolean
          description: Is the note for sale?
          example: true
        status:
          description: Status of the note in the conversion pipeline
          example: uploading
          enum:
            - uploading
            - draft
            - processing
            - moderation
            - done
            - error
          type: string
        errorMessage:
          type: string
          description: Error message if the note failed to upload or processing failed.
          example: Some external service is unavailable.
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        schoolName:
          type: string
          description: School name from metadata.
          example: >-
            Šolski center Celje, Srednja šola za kemijo, elektrotehniko in
            računalništvo
          minLength: 1
          maxLength: 255
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programName:
          type: string
          description: Program name from metadata.
          example: Tehnik računalništva
          minLength: 1
          maxLength: 255
        subjectId:
          type: string
          description: Subject ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        subjectName:
          type: string
          description: Subject name from metadata.
          example: matematika
          minLength: 1
          maxLength: 255
        teacherId:
          type: string
          description: Teacher ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        teacherName:
          type: string
          description: Teacher name from metadata.
          example: Janez Novak
          minLength: 1
          maxLength: 255
        verified:
          type: boolean
          description: Verified
      required:
        - text
        - files
        - id
        - createdAt
        - updatedAt
        - forSale
        - status
        - ownerId
        - verified
    ResponseRecommendedMetadataDto:
      type: object
      properties:
        title:
          type: string
          description: The recommended note's title
          example: From farm to table
      required:
        - title
    ResponseNoteDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        title:
          type: string
          description: Name of the note.
          example: My first note
          minLength: 1
          maxLength: 100
        files:
          description: Optional list of files.
          example:
            - JB5cSmT0iuSp4w85wDcJ
            - 4UVqFxtJ8RKPLOMaIBVD
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 20
        forSale:
          type: boolean
          description: Is the note for sale?
          example: true
        status:
          description: Status of the note in the conversion pipeline
          example: uploading
          enum:
            - uploading
            - draft
            - processing
            - moderation
            - done
            - error
          type: string
        errorMessage:
          type: string
          description: Error message if the note failed to upload or processing failed.
          example: Some external service is unavailable.
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        schoolName:
          type: string
          description: School name from metadata.
          example: >-
            Šolski center Celje, Srednja šola za kemijo, elektrotehniko in
            računalništvo
          minLength: 1
          maxLength: 255
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programName:
          type: string
          description: Program name from metadata.
          example: Tehnik računalništva
          minLength: 1
          maxLength: 255
        subjectId:
          type: string
          description: Subject ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        subjectName:
          type: string
          description: Subject name from metadata.
          example: matematika
          minLength: 1
          maxLength: 255
        teacherId:
          type: string
          description: Teacher ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        teacherName:
          type: string
          description: Teacher name from metadata.
          example: Janez Novak
          minLength: 1
          maxLength: 255
        verified:
          type: boolean
          description: Verified
      required:
        - id
        - createdAt
        - updatedAt
        - forSale
        - status
        - ownerId
        - verified
    ResponseNotesDto:
      type: object
      properties:
        data:
          description: Array of records.
          type: array
          items:
            $ref: "#/components/schemas/ResponseNoteDto"
        total:
          type: number
          description: Total number of records.
          example: 1
      required:
        - data
        - total
    UpdateNoteDto:
      type: object
      properties:
        text:
          type: array
          items:
            $ref: "#/components/schemas/BlockEntity"
        title:
          type: string
          description: Name of the note.
          example: My first note
          minLength: 1
          maxLength: 100
        status:
          type: string
          description: Status of the note in the conversion pipeline
          example: uploading
          enum:
            - uploading
            - draft
            - processing
            - moderation
            - done
            - error
        forSale:
          type: boolean
          description: Is the note for sale?
          example: true
        schoolId:
          type: string
          description: School ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        programId:
          type: string
          description: Program ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        subjectId:
          type: string
          description: Subject ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        teacherId:
          type: string
          description: Teacher ID from metadata.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        verified:
          type: boolean
          description: Verified
    CreateFileDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the file.
          example: my-file.txt
          minLength: 1
          maxLength: 255
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
      required:
        - name
    ResponseFileDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        name:
          type: string
          description: Name of the file.
          example: my-file.txt
          minLength: 1
          maxLength: 255
        objectPath:
          type: string
          description: Path of the file in the object storage.
          example: uploads/2JaQvadYTvzvMYGJDoO7/original.txt
        accessToken:
          type: string
          description: Access token for the file (allows public access).
          example: 0b572e1c-905c-486a-9165-b96d91eb0a28
        mimeType:
          type: string
          description: Mime type of the file.
          example: text/plain
        size:
          type: number
          description: Size of the file in bytes.
          example: 3145728
          minimum: 1
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
        status:
          description: Status of the file.
          example: uploading
          enum:
            - uploading
            - processing
            - done
            - error
          type: string
        errorMessage:
          type: string
          description: Error message if the file failed to upload or processing failed.
          example: This PDF file is corrupted.
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - objectPath
        - ownerId
        - status
    ResponseFilesDto:
      type: object
      properties:
        data:
          description: Array of records.
          type: array
          items:
            $ref: "#/components/schemas/ResponseFileDto"
        total:
          type: number
          description: Total number of records.
          example: 1
      required:
        - data
        - total
    UpdateFileDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the file.
          example: my-file.txt
          minLength: 1
          maxLength: 255
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
    CreateQaksDto:
      type: object
      properties:
        question:
          type: string
          description: Question.
          example: What is the meaning of life?
          minLength: 1
          maxLength: 2000
        answer:
          type: string
          description: Answer.
          example: "42"
          minLength: 1
          maxLength: 5000
        keywords:
          description: Keywords.
          example:
            - life
            - meaning
          type: array
          items:
            type: string
            maxLength: 200
            minLength: 1
      required:
        - question
        - answer
        - keywords
    ResponseQakDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        question:
          type: string
          description: Question.
          example: What is the meaning of life?
          minLength: 1
          maxLength: 2000
        answer:
          type: string
          description: Answer.
          example: "42"
          minLength: 1
          maxLength: 5000
        keywords:
          description: Keywords.
          example:
            - life
            - meaning
          type: array
          items:
            type: string
            maxLength: 200
            minLength: 1
        sectionId:
          type: string
          description: Id of section this QAK belongs to.
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
        noteId:
          type: string
          description: Id of note this QAK belongs to.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
      required:
        - id
        - createdAt
        - updatedAt
        - question
        - answer
        - keywords
        - sectionId
        - noteId
        - ownerId
    ResponseQaksDto:
      type: object
      properties:
        data:
          description: Array of qaks.
          type: array
          items:
            $ref: "#/components/schemas/ResponseQakDto"
        total:
          type: number
          description: Total number of qaks.
          example: 1
      required:
        - data
        - total
    UpdateQaksDto:
      type: object
      properties:
        question:
          type: string
          description: Question.
          example: What is the meaning of life?
          minLength: 1
          maxLength: 2000
        answer:
          type: string
          description: Answer.
          example: "42"
          minLength: 1
          maxLength: 5000
        keywords:
          description: Keywords.
          example:
            - life
            - meaning
          type: array
          items:
            type: string
            maxLength: 200
            minLength: 1
        sectionId:
          type: string
          description: Id of section this QAK belongs to.
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
    CreateQaksectionDto:
      type: object
      properties:
        name:
          type: string
          description: Name of section.
          example: My section
          minLength: 1
          maxLength: 200
        parentId:
          type: string
          description: Parent section id (if empty then it's a root section).
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
      required:
        - name
    ResponseQaksectionDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        name:
          type: string
          description: Name of section.
          example: My section
          minLength: 1
          maxLength: 200
        parentId:
          type: string
          description: Parent section id (if empty then it's a root section).
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
        noteId:
          type: string
          description: Id of note.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - noteId
        - ownerId
    ResponseQaksectionsDto:
      type: object
      properties:
        data:
          description: Array of records.
          type: array
          items:
            $ref: "#/components/schemas/ResponseQaksectionDto"
        total:
          type: number
          description: Total number of records.
          example: 1
      required:
        - data
        - total
    UpdateQaksectionDto:
      type: object
      properties:
        name:
          type: string
          description: Name of section.
          example: My section
          minLength: 1
          maxLength: 200
        parentId:
          type: string
          description: Parent section id (if empty then it's a root section).
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
    CreateQakfeedbackDto:
      type: object
      properties:
        level:
          type: number
          description: Confidence level.
          example: 5
          minimum: 1
          maximum: 5
      required:
        - level
    Confidence:
      type: object
      properties:
        level:
          type: number
          description: Confidence level.
          example: 5
          minimum: 1
          maximum: 5
        timesShown:
          type: number
          description: Times shown.
          example: 6
          minimum: 0
        qakId:
          type: string
          description: Qak id
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
      required:
        - level
        - timesShown
        - qakId
    ResponseQakFeedbackDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the record.
          example: 2JaQvadYTvzvMYGJDoO7
        createdAt:
          format: date-time
          type: string
          description: Date when the record was created.
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          format: date-time
          type: string
          description: Date when the file was last updated.
          example: "2021-01-01T00:00:00.000Z"
        ratings:
          description: Ratings for the QAKs.
          type: array
          items:
            $ref: "#/components/schemas/Confidence"
        sectionId:
          type: string
          description: Id of section this QAK belongs to.
          example: PvA2l1WFJilthCUJS1cT
          minLength: 20
          maxLength: 20
        noteId:
          type: string
          description: Id of note this QAK belongs to.
          example: 2JaQvadYTvzvMYGJDoO7
          minLength: 20
          maxLength: 20
        ownerId:
          type: string
          description: Id of the owner of the record.
          example: ECIY9RjGKjSHt1nZSIzuR1l5XLE2
          minLength: 28
          maxLength: 28
      required:
        - id
        - createdAt
        - updatedAt
        - ratings
        - sectionId
        - noteId
        - ownerId
